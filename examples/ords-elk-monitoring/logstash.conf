input {
  file {
    #sample log name ords_2022_02_02.log
    path => "/usr/share/logstash/data/logs/access_logs/ords_*.log"
    tags => ["ordsrequestlog"]
    start_position => "beginning"
  }
  file {
    path => "/usr/share/logstash/data/logs/java_logs/ords_console*.log"
    tags => ["ordsconsolelog"]
    start_position => "beginning"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
  }
}
filter {
  if "ordsrequestlog" in [tags] {
    grok {
         #since below regex is modular, it was merged with the other 2 regex that were available
         match => { "message" => "(\[?%{IP:http_server}\]?\s+)?+(\-\s+)*(%{DATA:user-logname}\s+)?+(%{DATA:authuser}\s+)?+\[%{HTTPDATE:ords_timestamp}\]\s+(?:\\?\"%{WORD:http_method}\s+%{DATA:request}\s?(?:HTTP\/%{NUMBER:http_version})?\\?\"\s+|\\?\"%{DATA:rawrequest}\\?\"\s+)(%{NUMBER:http_status}\s+)?((?:%{NUMBER:bytes}|\-)\s+)?(\\?\"(?:%{DATA:referrer}|\-)\\?\"\s+)?(\\?\"%{DATA:user_agent}\\?\"\s+)?(%{NUMBER:latency}\s+)?(%{DATA:request-host}\s+)?((?:%{GREEDYDATA:request-id}|\-))?"}
    }

    date {
      locale => "en"
      match => ["ords_timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      target => "@timestamp"
      remove_field => [ "ords_timestamp"]
    }

    mutate {
        add_field => [ "src_host_name", "%{host}" ]
    }
    
    if [request-host] =~ "\.oracle(gov)?cloudapps\.(?:com|uk)" {
      grok {
         match => { "request-host" => "%{DATA:tenant_id}\-%{DATA:pdb_name}\..*oracle(gov)?cloudapps.*" }
      }
    }
    
    ########## HOST CATEGORIZATION ##########
    if [request-host] =~ "\.oracle(gov)?cloudapps\.(?:com|uk)" {
      mutate {
        add_field => {"hostCategory" => "oraclecloudapps" }
      }
    }
    else if [request-host] =~ "oraclevcn.com" {
      mutate {
        add_field => {"hostCategory" => "oraclevcn" }
      }
    }
    else if [request-host] =~ "10(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}:7003" or [request-host] =~ "localhost" {
      mutate {
        add_field => {"hostCategory" => "internal" }
      }
    }
    # below regex is to detect IPv6 or IPv4 source is https://github.com/elastic/elasticsearch/blob/master/libs/grok/src/main/resources/patterns/grok-patterns and https://ihateregex.io/expr/ip/
    else if [request-host] =~ "(?:((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?|(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})" {
      mutate {
        add_field => {"hostCategory" => "ip" }
      }
    }
    else if [request-host] == "-" {
      mutate {
        add_field => {"hostCategory" => "no request host info" }
      }
    }
    else if [request-host] =~ ".*" {
      mutate {
        add_field => {"hostCategory" => "vanity" }
      }
    }
    else {
      mutate {
        add_field => {"hostCategory" => "no request host info" }
      }
    }

    ########## TRAFFIC CATEGORIZATION ##########
    if [request] =~ "\_sdw" {
      mutate {
        add_field => {"trafficCategory" => "SDW" }
      }
    }
    else if [request] =~ "\_\/sql" {
      mutate {
        add_field => {"trafficCategory" => "SQL" }
      }
    }
    else if [request] =~ "\_adp" {
      mutate {
        add_field => {"trafficCategory" => "ADP" }
      }
    }
    else if [request] =~ "\/soda\/" {
      mutate {
        add_field => {"trafficCategory" => "SODA" }
      }
    }
    else if [request] =~ "\/ords\/?" and [http_status] == "302" {
      mutate {
        add_field => {"trafficCategory" => "APEX" }
      }
    }
    else if [request] =~ "\/ords\/wwv" or [request] =~ "\/ords\/f\?" or [request] =~ "\/ords\/apex" or [request] =~ "\/ords\/apex_admin" or [request] =~ "\/ords\/r\/" {
      mutate {
        add_field => {"trafficCategory" => "APEX" }
      }
    }
    ########## NOT IDENTIFIED TRAFFIC ##########
    else if [request] =~ "^\/$" {
      mutate {
        add_field => {"trafficCategory" => "MISC" }
      }
    }
    else if [request] =~ ".*" {
      mutate {
        add_field => {"trafficCategory" => "CUSTOMER_REST" }
      }
    }
    else {
      mutate {
        add_field => {"trafficCategory" => "NO REQUEST INFO" }
      }
    }
  }    

  if "ordsconsolelog" in [tags] {
    grok {
         match => {
           "message" => [
             "%{TIMESTAMP_ISO8601:console_timestamp}\s+(%{LOGLEVEL:log_level}\s+)?(\<%{DATA:ecid}\>\s+)?(%{WORD:http_method}\s+)?(%{HOSTNAME:hostname}\s+)?(%{URIPATHPARAM:uri_path}\s+)?(%{NUMBER:http_code})?%{DATA:console_msg}\s*(?<thrown>(?<=\s)(?:[a-zA-Z0-9]+(?:\.[a-zA-Z0-9]+)+)(?=(?:\s|\:|\(|\))).*)?"
           ]
         }
         match => {
           "message" => [
             "%{TIMESTAMP_ISO8601:console_timestamp}\:%{LOGLEVEL:log_level}\:%{DATA:module}\:%{DATA:thread}\:\s+%{GREEDYDATA:console_msg}"
           ]
         }
    }

    if "comj.DoSFilter" in [module] or "DoSFilter" in [console_msg] {
      mutate { add_tag => ["ordsdosfilterlog"] }
      grok { match => { "jetty_message" => [".*?uri=%{DATA:dos_filter_uri},"] } }
      grok { 
        match => { "jetty_message" => [".*?clientIP=%{IP:client_ip},?"] }  
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?remoteAddr=%{IP:remote_addr},?"] }  
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-OCI\-LB\-NetworkMetadata=\{%{DATA:x_oci_lb_networkmetadata}\s+\},?"] }  
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?ADB\-Request\-Id=%{DATA:adb_request_id},"] }  
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-Forwarded\-Proto=%{WORD:x_forwarded_proto},?"] }  
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-Forwarded\-Host=%{HOSTPORT:x_forwarded_host},?"] }  
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Host=%{DATA:host},"] }  
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-Forwarded\-For=%{IP:x_forwarded_for},?"] }  
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-Real\-IP=%{IP:x_real_ip},?"] }  
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-vcn\-id=%{NUMBER:x_vcn_id},?"] } 
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Origin=%{URI:origin},?"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?ECID\-Context=%{DATA:ecid_context},"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Accept=%{DATA:accept},\s+\S+\="] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-Requested\-With=%{DATA:x_requested_with},"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?User\-Agent=%{DATA:user_agent},\s+\S+\="] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Referer=%{DATA:referrer},"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Sec\-Fetch\-Site=%{DATA:sec_fetch_site},"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Sec\-Fetch\-Dest=%{DATA:sec_fetch_dest},"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Accept\-Encoding=%{DATA:accept_encoding},\s+\S+\="] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-Conversation\-Id=%{DATA:x_conversation_id},"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Sec\-Fetch\-Mode=%{DATA:sec_fetch_mode},"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-OCI\-VCN\-ID=%{NUMBER:x_oci_vcn_id},?"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?X\-OCI\-VCN\_OCID=%{DATA:x_oci_vcn_ocid},"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?sec\-ch\-ua=%{DATA:sec_ch_ua},\s+\S+\="] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?sec\-ch\-ua\-mobile=%{DATA:sec_ch_ua_mobile},"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?sec\-ch\-ua\-platform=%{DATA:sec_ch_ua_platform},\s+\S+\="] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Accept\-Language=%{DATA:accept_language},\s+\S+\="] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Content\-Length=%{POSINT:content_length},?"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?Content\-Type=%{DATA:content_type}(;|,)"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
      grok { 
        match => { "jetty_message" => [".*?charset=%{DATA:charset}\},?"] }
        match => { "jetty_message" => ["%{GREEDYDATA}"] }
      }
    }

    date {
      locale => "en"
      match => [ "console_timestamp" , "ISO8601"]
      target => "@timestamp"
    }

    mutate {
        add_field => [ "src_host_name", "%{host}" ]
        remove_field  => [ "console_timestamp", "@version", "console_msg"]
    }

    ########## Auto Diagnose begins ##########
    ########## Warnings ##########
    if [message] =~ "WARNING .*jdbc.InitialLimit in configuration .* is using a value of 0" {
      mutate {
        add_field => {"autoDiagnose" => "Expected warning in ADB, please ignore" }
      }
    }
    else if [message] =~ "WARNING.*\n.*Request had db ELAPSED time of" {
      mutate {
        add_field => {"autoDiagnose" => "Request to Database is taking too long to complete" }
      }
    }
    else if [message] =~ "WARNING.*An attempt was made to map a host name that was not found" {
      mutate {
        add_field => {"autoDiagnose" => "Attempted to map a host name that was not found" }
      }
    }

    ########## 404 MESSAGES ##########
    else if [message] =~ "(404 Could not find any remote configuration for the host.*(\n){1}oracle.dbtools.jdbc.pools.remote.RemoteURLMappingException|WARNING An attempt was made to map a host name that was not found)" {
      mutate {
        add_field => {"autoDiagnose" => "Broker could not find a Service for the specified host name. Please check the Broker Logs." } #needs merge 1
      }
    }
    ########## 500 MESSAGES ##########
    else if [message] =~ "oracle.net.ns.NetException.* Unable to parse the wallet location supplied" {
      mutate {
        add_field => {"autoDiagnose" => "Wallet could not be found in the location supplied" }
      }
    }
    else if [message] =~ "java.sql.SQLRecoverableException.* No more data to read from socket" {
      mutate {
        add_field => {"autoDiagnose" => "ORDS was unable to make a connection to the database, because CMAN/Database closed the Database session. Check CMAN and database logs" }
      }
    }
    else if [message] =~ "oracle.dbtools.jdbc.pools.remote.RemoteURLMappingException.* Status Code.* 500 The remote configuration server failed to process this mapping request due an internal server error" {
      mutate {
        add_field => {"autoDiagnose" => "Broker failed to process the request. Please check Broker logs" }
      }
    }
    else if [message] =~ "java.io.IOException.* Connection reset by peer" {
      mutate {
        add_field => {"autoDiagnose" => "HTTP connection reset by peer" }
      }
    }
    else if [message] =~ "(org.eclipse.jetty.io.EofException.* Closed|because response was already committed)" {
      mutate {
        add_field => {"autoDiagnose" => "HTTP response could not be committed" }
      }
    }
    else if [message] =~ "oracle.dbtools.url.mapping.TargetNotAvailableException.* No more sessions can be created in the database at this time" {
      mutate {
        add_field => {"autoDiagnose" => "Maximum number of database sessions being exceeded" }
      }
    }
    else if [message] =~ "oracle.dbtools.common.jdbc.ServiceDoesNotExistException.*The database service named .* does not exist" {
      mutate {
        add_field => {"autoDiagnose" => "The database service does not exist" }
      }
    }
    ########## DB MESSAGES ##########
    else if [message] =~ "ORA-00028" {
      mutate {
        add_field => {"autoDiagnose" => "ORA-00028 found, session was killed" }
      }
    }
    else if [message] =~ "ORA-04088" {
      mutate {
        add_field => {"autoDiagnose" => "ORA-04088 found, trigger execution error" }
      }
    }
    else if [message] =~ "ORA-00904" {
      mutate {
        add_field => {"autoDiagnose" => "ORA-00904 found, invalid identifier" }
      }
    }
    else if [message] =~ "ORA-00942" {
      mutate {
        add_field => {"autoDiagnose" => "ORA-00942 found, table or view does not exist" }
      }
    }
    else if [message] =~ "ORA-01089" {
      mutate {
        add_field => {"autoDiagnose" => "ORA-01089 found, shutdown in progress" }
      }
    }
    else if [message] =~ "ORA-01017" {
      mutate {
        add_field => {"autoDiagnose" => "Database user could not be authenticated, please verify username/password are correct" }
      }
    }
    else if [message] =~ "ORA-12516" {
      mutate {
        add_field => {"autoDiagnose" => "Unable to connect to database, TNS listener could not find available handler with matching protocol stack" }
      }
    }
    else if [message] =~ "ORA-28000" {
      mutate {
        add_field => {"autoDiagnose" => "Unable to connect to database, The account is locked" }
      }
    }
    else if [message] =~ "ORA-28001" {
      mutate {
        add_field => {"autoDiagnose" => "Athentication exception, The user password has expired" }
      }
    }
    else if [message] =~ "PLS-00306" {
      mutate {
        add_field => {"autoDiagnose" => "PLS-00306 found, wrong number of arguments" }
      }
    }
    else if [message] =~ "ORA-12529.*connect request rejected based on current filtering rules" {
      mutate {
        add_field => {"autoDiagnose" => "CMAN refused the connection base on filtering rules" }
      }
    }
    else if [message] =~ "java.sql.SQLRecoverableException.* ORA-00603" {
      mutate {
        add_field => {"autoDiagnose" => "ORA-603 found, check DB alert.log" }
      }
    }
    else if [message] =~ "java.sql.SQLException.* ORA-00600.* internal error code" {
      mutate {
        add_field => {"autoDiagnose" => "ORA-600 found, check DB alert.log" }
      }
    }
    else if [message] =~ "java.sql.SQLException.* ORA-22275.* invalid LOB locator" {
      mutate {
        add_field => {"autoDiagnose" => "Customer Code: Invalid LOB locator" }
      }
    }
    else if [message] =~ "java.sql.SQLException.* ORA-01652.* unable to extend temp segment" {
      mutate {
        add_field => {"autoDiagnose" => "Customer Code: No More Database Space" }
      }
    }
    else if [message] =~ "java.sql.SQLException.* ORA-04036.* PGA memory used by the instance exceeds PGA_AGGREGATE_LIMIT" {
      mutate {
        add_field => {"autoDiagnose" => "Customer Code: PGA Limit Reached" }
      }
    }
    else if [message] =~ "java.sql.SQLException.* ORA-65047.* Object APEX.* is invalid or compiled with errors in root" {
      mutate {
        add_field => {"autoDiagnose" => "APEX installation has invalid objects" }
      }
    }
    else if [message] =~ "java.sql.SQLSyntaxErrorException.* ORA" {
      mutate {
        add_field => {"autoDiagnose" => "Customer Code: SQL Syntax Error" }
      }
    }
    ########## SEVERE MESSAGES WITH NO ERROR CODE ##########
    else if [message] =~ "Strict-Transport-Security.* max-age=31536000" {
      mutate {
        add_field => {"autoDiagnose" => "More context needed, please check adjacent logs" }
      }
    }
    else if [message] =~ "java.util.concurrent.TimeoutException.* Idle timeout expired" {
      mutate {
        add_field => {"autoDiagnose" => "Idle time exceeded" }
      }
    }
    else if [message] =~ "GZIP compression failed for a static resource" {
      mutate {
        add_field => {"autoDiagnose" => "GZIP compression failed, please check adjacent logs" }
      }
    }
    else if [message] =~ "oracle.dbtools.common.jdbc.ConnectionPoolConfigurationException.*The database user for the connection pool named.*is not able to proxy to the schema" {
      mutate {
        add_field => {"autoDiagnose" => "Unable to connect Database user to schema, verify if this is a configured restriction or an authorization failure" }
      }
    }
    ########## INFO MESSAGES ##########
    else if [message] =~ "INFO[':'|' ']" {
      mutate {
        add_field => {"autoDiagnose" => "INFO Message, diagnose not needed" }
      }
    }
    ########## Catch-all for internal server exceptions not caught in previous filters  ##########
    else if [message] =~ "InternalServerException" {
      mutate {
        add_field => {"autoDiagnose" => "InternalServerException, check ords logs" }
      }
    }
    ########## NOT IDENTIFIED MESSAGES ##########
    else{
      mutate {
        add_field => {"autoDiagnose" => "Automatic Diagnostic not found for this occurrence" }
      }
    }
  }
}
output {
  elasticsearch { 
    hosts => ["elasticsearch:9200"]
    index => "adb-ords-%{+YYYY.MM.dd}"
    # DO NOT MODIFY UNLESS SPECIFICALLY NEEDED
    #user => "%{ELASTIC_USER_NAME}"
    #password =>"%{ELASTIC_USER_PASSWORD}"
  }
}